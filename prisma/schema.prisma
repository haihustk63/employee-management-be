// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RolesEnum {
  EMPLOYEE
  DIVISION_MANAGER
  ADMIN
  SUPER_ADMIN
}

enum WorkingStatusEnum {
  OFFICIAL
  PROBATIONARY
  TEMPORARY_LAYOFFS
}

enum CommonRequestEnum {
  BEING_LATE
  LEAVING_EARLY
  OVER_TIME
}

enum RequestStatusEnum {
  PENDING
  ACCEPTED
  REJECTED
}

enum RequestForAbsentTypeEnum {
  UNPAID_LEAVE
  PAID_LEAVE
}

enum TestQuestionTypeEnum {
  ONE_CHOICE
  MULTIPLE_CHOICE
  ESSAYS
}

enum TestQuestionLevelEnum {
  EASY
  MEDIUM
  HARD
}

model Position {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(20)
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  employees   Employee[]
  jobs        Job[]

  @@map("position")
}

model Delivery {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(20)
  description      String?
  deliveryEmployee DeliveryEmployee[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt

  @@map("delivery")
}

model Employee {
  id                    Int                    @id @default(autoincrement())
  firstName             String                 @map("first_name") @db.VarChar(20)
  middleName            String?                @map("middle_name") @db.VarChar(20)
  lastName              String                 @map("last_name") @db.VarChar(20)
  phoneNumber           String?                @map("phone_number") @db.VarChar(10)
  dateOfBirth           DateTime?              @map("date_of_birth")
  positionId            Int                    @map("position_id")
  position              Position               @relation(fields: [positionId], references: [id])
  joinDate              DateTime               @default(now()) @map("join_date")
  location              Json?
  role                  RolesEnum              @default(EMPLOYEE)
  paidLeaveCount        Int                    @default(0) @map("paid_leave_count")
  workingStatus         WorkingStatusEnum      @default(PROBATIONARY) @map("working_status")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt
  employeeAccount       EmployeeAccount?
  devices               Device[]
  checkInOut            CheckInOut[]
  requestWorkingRemotes RequestWorkingRemote[]
  commonRequests        CommonRequest[]
  requestForAbsents     RequestForAbsent[]
  educationPrograms     EmployeeEducation[]
  candidates            Candidate[]
  deliveryEmployee      DeliveryEmployee?

  @@map("employee")
}

model DeliveryEmployee {
  deliveryId Int      @map("delivery_id")
  delivery   Delivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  employeeId Int      @unique @map("employee_id")
  employee   Employee @relation(fields: [employeeId], references: [id])
  isManager  Boolean  @default(false) @map("is_manager")
  createdAt  DateTime @default(now())

  @@map("delivery_employee")
}

model Candidate {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(30)
  phone            String?           @db.VarChar(10)
  email            String            @db.VarChar(30)
  appointmentTime  DateTime?         @map("appointment_time")
  cvLink           String            @map("cv_link")
  interviewerId    Int?              @map("interviewer_id")
  interviewer      Employee?         @relation(fields: [interviewerId], references: [id])
  assessment       Int?              @default(2)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  candidateAccount CandidateAccount?
  skillTest        SkillTest?
  job              Job?              @relation(fields: [jobId], references: [id])
  jobId            Int?

  @@map("candidate")
}

model EmployeeAccount {
  email      String   @unique
  password   String
  employeeId Int      @unique @map("employee_id")
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("employee_account")
}

model CandidateAccount {
  candidateId Int       @unique @map("candidate_id")
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  username    String    @unique
  password    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@map("candidate_account")
}

model DeviceType {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(30)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  devices     Device[]

  @@map("device_type")
}

model DeviceBrand {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(30)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  devices     Device[]

  @@map("device_brand")
}

model Device {
  id            Int         @id @default(autoincrement())
  name          String      @db.VarChar(30)
  deviceTypeId  Int         @map("device_type_id")
  deviceType    DeviceType  @relation(fields: [deviceTypeId], references: [id])
  deviceBrandId Int
  deviceBrand   DeviceBrand @relation(fields: [deviceBrandId], references: [id])
  option        Json?
  description   String?
  employeeId    Int
  employee      Employee    @relation(fields: [employeeId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt

  @@map("device")
}

// 0 - check in, 1- check out
model CheckInOut {
  employeeId Int      @map("employee_id")
  employee   Employee @relation(fields: [employeeId], references: [id])
  time       DateTime @default(now())
  type       Int      @default(0)
  createdAt  DateTime @default(now())

  @@unique([employeeId, time])
  @@map("check_in_out")
}

model CommonRequest {
  employeeId Int               @map("employee_id")
  employee   Employee          @relation(fields: [employeeId], references: [id])
  date       DateTime          @default(now())
  duration   Int
  type       CommonRequestEnum @default(BEING_LATE)
  status     RequestStatusEnum @default(PENDING)
  createdAt  DateTime          @default(now())

  @@unique([employeeId, date, type])
  @@map("common_request")
}

model RequestWorkingRemote {
  employeeId        Int               @map("employee_id")
  employee          Employee          @relation(fields: [employeeId], references: [id])
  date              DateTime          @default(now())
  isRemoteMorning   Boolean           @default(false) @map("is_remote_morning")
  isRemoteAfternoon Boolean           @default(false) @map("is_remote_afternoon")
  status            RequestStatusEnum @default(PENDING)
  createdAt         DateTime          @default(now())

  @@unique([employeeId, date])
  @@map("request_working_remote")
}

model RequestForAbsent {
  employeeId Int                      @map("employee_id")
  employee   Employee                 @relation(fields: [employeeId], references: [id])
  date       DateTime                 @default(now())
  type       RequestForAbsentTypeEnum @default(UNPAID_LEAVE)
  status     RequestStatusEnum        @default(PENDING)
  createdAt  DateTime                 @default(now())

  @@unique([employeeId, date])
  @@map("request_for_absent")
}

model Tag {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(20)
  recruimentNews    RecruimentNews[]
  educationPrograms EducationProgram[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt

  @@map("tag")
}

model RecruimentNews {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  tags      Tag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("recruiment_news")
}

model EducationProgram {
  id          Int                 @id @default(autoincrement())
  title       String
  content     String?
  tags        Tag[]
  maxSlot     Int?                @map("max_slot") @db.SmallInt
  time        DateTime?
  averageRate Int                 @default(0) @map("average_rate")
  employees   EmployeeEducation[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now()) @updatedAt

  @@map("educatipn_program")
}

model EmployeeEducation {
  employeeId Int              @map("employee_id")
  employee   Employee         @relation(fields: [employeeId], references: [id])
  programId  Int              @map("program_id")
  program    EducationProgram @relation(fields: [programId], references: [id])
  isTutor    Boolean          @default(false)
  rate       Int?
  createdAt  DateTime         @default(now())

  @@unique([employeeId, programId])
  @@map("employee_education")
}

model TestTopic {
  id                Int            @id @default(autoincrement())
  name              String         @db.VarChar(30)
  description       String?
  testTopicQuestion TestQuestion[]
}

model TestQuestion {
  id                Int                   @id @default(autoincrement())
  questionText      String                @map("question-text")
  questionSource    Json?                 @map("question-source")
  type              TestQuestionTypeEnum  @default(ONE_CHOICE)
  level             TestQuestionLevelEnum @default(EASY)
  options           Json?
  answer            Json?
  topicId           Int
  topic             TestTopic             @relation(references: [id], fields: [topicId])
  testQuestionTests TestQuestionTests[]
}

model SkillTest {
  id                Int                 @id @default(autoincrement())
  candidateId       Int?                @unique @map("candidate_id")
  candidate         Candidate?          @relation(references: [id], fields: [candidateId])
  score             Decimal?
  isSubmitted       Boolean             @default(false) @map("is_submitted")
  testQuestionTests TestQuestionTests[]
}

model TestQuestionTests {
  questionId Int          @map("question_id")
  question   TestQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  testId     Int          @map("test_id")
  test       SkillTest    @relation(references: [id], fields: [testId], onDelete: Cascade)
  answer     Json?

  @@unique([questionId, testId])
}

model Job {
  id         Int         @id @default(autoincrement())
  title      String
  // 0 - parttime, 1 - fulltime
  typeOfJob  Int         @map("type_of_job")
  upTo       Int?        @map("up_to")
  // intern, fresher, junior, middle, senior
  level      Int
  jobDetail  String?     @map("job_detail") @db.LongText
  positionId Int?        @map("position_id")
  position   Position?   @relation(fields: [positionId], references: [id])
  candidate  Candidate[]
}
